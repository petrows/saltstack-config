import grafanalib.core as grafana
from grafanalib._gen import DashboardEncoder
import json
import requests
from urllib.parse import urlparse, parse_qs
from os import getenv

# Define some local defaults
GRAFANA_LINE_WIDTH = 1
GRAFANA_TIME = grafana.Time('now-24h', 'now')
GRAFANA_TIMEZONE = 'browser'
GRAFANA_SOURCE_OPENHAB = 'openhab_home'

def get_dashboard_json(dashboard):
    '''
    get_dashboard_json generates JSON from grafanalib Dashboard object

    :param dashboard - Dashboard() created via grafanalib
    '''

    # grafanalib generates json which need to pack to "dashboard" root element
    return json.dumps({"dashboard": dashboard.to_json_data(), "overwrite": True}, sort_keys=True, indent=2, cls=DashboardEncoder)


def upload_to_grafana(dashboard):
    '''
    upload_to_grafana tries to upload dashboard to grafana and prints response

    :param json - dashboard json generated by grafanalib
    :param server - grafana server name
    :param api_key - grafana api key with read and write privileges
    '''

    json = get_dashboard_json(dashboard)

    server = getenv("GRAFANA_URL")
    username = getenv("GRAFANA_USERNAME")
    password = getenv("GRAFANA_PASSWORD")

    headers = {
               'Content-Type': 'application/json'}
    r = requests.post(
        f"{server}/api/dashboards/db",
        data=json,
        headers=headers,
        auth=requests.auth.HTTPBasicAuth(username, password)
    )
    # TODO: add error handling
    print(f"{r.status_code} - {r.content}")
