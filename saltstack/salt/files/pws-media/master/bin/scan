#!/usr/bin/env python-app

import datetime
import time
import fcntl
import logging
import argparse
import os
from pathlib import Path
from PyPDF2 import PdfReader
import subprocess
import sys

file_tmp_raw = Path("/tmp/scan-raw.pdf")
file_tmp_out = Path("/tmp/scan-out.pdf")
file_tmp_ocr = Path("/tmp/scan-ocr.pdf")

def exec(command, throw_error=True):
    command_base = os.path.basename(command[0])
    p = subprocess.Popen(
        command,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )

    fl = fcntl.fcntl(p.stdout, fcntl.F_GETFL)
    fcntl.fcntl(p.stdout, fcntl.F_SETFL, fl | os.O_NONBLOCK)

    fl = fcntl.fcntl(p.stderr, fcntl.F_GETFL)
    fcntl.fcntl(p.stderr, fcntl.F_SETFL, fl | os.O_NONBLOCK)

    while None == p.poll():
        try:
            line = p.stdout.readline()
            if line :
                sys.stdout.write(line.decode('utf-8'))
        except OSError:
            pass
        try:
            line = p.stderr.readline()
            if line :
                logging.error("%s! %s", command_base, line.decode('utf-8').strip())
        except OSError:
            pass

    p.wait()

    if 0 != p.returncode:
        if throw_error:
            raise RuntimeError(f"Command '{' '.join(command)}' return code {p.returncode}")
        else:
            logging.error("Command '%s' return code %d", ' '.join(command), p.returncode)

    return 0 == p.returncode


def scan(mode: str, file_name: Path):
    # Cleanup hp-scan files
    exec(["bash", "-c", "rm -rf /tmp/hpscan*"])
    scanner_tmp = Path("/tmp/scanner-raw.pdf")
    cmd = ["hp-scan", "--device=hpaio:/net/officejet_pro_6970?ip=10.80.0.9&queue=false", "--mode=color", "--dest=file", "--size=a4", "--compression=none", "--resolution=300", f"--output={str(scanner_tmp)}"]
    if mode == "adf":
        cmd.append("--adf")
    exec(cmd)
    exec(["ps2pdf", str(scanner_tmp), str(file_name)])
    scanner_tmp.unlink()

def pdf_append(doc_a: Path, doc_b: Path, out: Path):
    # Merge to tmp doc, then move
    exec(["pdfunite", str(doc_a), str(doc_b), "/tmp/pdf_merge.pdf"])
    exec(["mv", "/tmp/pdf_merge.pdf", str(out)])

def pdf_merge_adf(doc_a: Path, doc_b: Path, out: Path):
    # Merge ADF front/back pages
    exec(["pdftk", f"A={str(doc_a)}", f"B={str(doc_b)}", "shuffle", "A", "Bend-1", "output", "/tmp/pdf_merge.pdf"])
    exec(["mv", "/tmp/pdf_merge.pdf", str(out)])

def pdf_get_pages_count(doc: Path):
    file = open(doc, 'rb')
    reader = PdfReader(file)
    return len(reader.pages)

parser = argparse.ArgumentParser(
    description='Scan document into archive folder')

parser.add_argument(
    '-l', '--log',
    choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],
    default='INFO',
    help='set log level',
)

parser.add_argument(
    '-d', '--date',
    type=str,
    action='store',
    default=None,
    help='override document date (YYYY-MM-DD)',
)

parser.add_argument(
    '-p', '--pages',
    type=int,
    action='store',
    default=0,
    help='limit pages to scan',
)

parser.add_argument(
    'mode',
    choices=['page', 'adf'],
    action='store',
    help='feeder type (page - document glass, adf - document feeder)',
)

parser.add_argument(
    'name',
    type=str,
    action='store',
    help='document name',
)

args = parser.parse_args()

log_level = args.log
logging.basicConfig(level=log_level)

logging.info("Scanning: %s, type %s", args.name, args.mode)

# Clean temporary files
if file_tmp_raw.exists(): file_tmp_raw.unlink()
if file_tmp_out.exists(): file_tmp_out.unlink()
if file_tmp_ocr.exists(): file_tmp_ocr.unlink()

# Document date
file_date = datetime.date.today()
if args.date:
    file_date = datetime.date.fromisoformat(args.date)
file_tms = int(round(time.mktime(file_date.timetuple())))

file_output = Path("/srv/storage/common/archive") / str(file_date.year) / f"{args.name}.pdf"

if file_output.exists():
    logging.error("Ouput file exists: %s", str(file_output))
    sys.exit(1)

for page_n in range(128):
    logging.info("Scanning page: %d", page_n)
    scan(args.mode, file_tmp_raw)
    # New page: copy previous file and merge PDF
    if file_tmp_out.exists():
        if args.mode == 'page':
            pdf_append(file_tmp_out, file_tmp_raw, file_tmp_out)
        if args.mode == 'adf':
            # Test pages count consistent?
            pages_old = pdf_get_pages_count(file_tmp_out)
            pages_new = pdf_get_pages_count(file_tmp_raw)
            if pages_old != pages_new:
                logging.error("ADF pages count mismatch! %d != %d", pages_old, pages_new)
                sys.exit(2)
            pdf_merge_adf(file_tmp_out, file_tmp_raw, file_tmp_out)
    else:
        file_tmp_raw.rename(str(file_tmp_out))

    # ADF: abort on 2-nd side
    if args.mode == 'adf' and page_n == 1:
        break
    # Pages limit: stop if requested
    if args.pages and page_n+1 == args.pages:
        logging.info("Pages lmimit reached: %d", args.pages)
        break
    try:
        page_ask_text = ''
        if args.mode == 'adf':
            page_ask_text = "\nRotate document in ADF - back side up"
        page_ask = input(f"\n\nScan another page?{page_ask_text}\nPress ENTER for new page, Ctrl+D to finish, Ctrl+C to cancel scan\n")
        logging.info("New page requested")
    except EOFError:
        # Ctrl+D
        break

logging.info("Scan done, prepare final document")

# Perform OCR
exec(["scan-ocr", str(file_tmp_out), str(file_tmp_ocr)])
# Set file mtime
os.utime(str(file_tmp_ocr), (file_tms, file_tms))

# Move result file
exec(["mv", str(file_tmp_ocr), str(file_output)])

logging.info("Done, result is %s", str(file_output))
