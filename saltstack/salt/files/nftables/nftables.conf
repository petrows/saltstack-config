#!/usr/sbin/nft -f
# Ruleset files related to PWS config
# Change for this file will lead to restart some services related,
# for example: docker, kubelet

{%- if pillar.firewall.strict_mode %}
    {%- set strict_policy = 'drop' %}
{%- else %}
    {%- set strict_policy = 'accept' %}
{%- endif %}
{%- set proto_tables = ['ip', 'ip6'] %}

flush ruleset

{%- for proto in proto_tables %}
table {{ proto }} filter {
    chain INPUT {
        type filter hook input priority filter; policy {{ strict_policy }};
        # meta nftrace set 1
        # log prefix "ip pws-filter input: " counter

        # Allow traffic from established and related packets
        ct state established,related counter accept

        # Drop invalid packets
        ct state invalid counter drop

        # Allow loopback traffic
        iifname lo accept

        # Allow all ICMP and IGMP traffic, but enforce a rate limit
        # to help prevent some types of flood attacks.
        {%- if proto == 'ip' %}
        ip protocol icmp limit rate 10/second accept
        ip protocol igmp limit rate 10/second accept
        {%- else %}
        ip6 nexthdr ipv6-icmp limit rate 10/second accept
        {%- endif %}


        # Allow SSH
        tcp dport {{ pillar.ssh.port }} counter accept comment "Allow SSH (port {{ pillar.ssh.port }})"

        # Allow DNS (UDP and TCP)
        udp dport 53 counter accept comment "Allow DNS (UDP)"
        tcp dport 53 counter accept comment "Allow DNS (TCP)"

        # Opened ports
        {% for name, port in pillar.firewall.ports_open.items() %}
        # Allow {{ name }}
        {{ port.proto | default('tcp') }} dport {{ port.dst }} counter accept comment "Allow port: {{ name }}"
        {% endfor %}

        {%- if pillar.check_mk_agent.ssh|default(False) %}
        tcp dport 6556 counter drop comment "Drop Check_MK agent port if SSH is enabled"
        {%- endif %}

        {%- for name, rule in pillar.firewall.rules_filter_input.items() %}
        {{ rule }} comment "Custom rule: {{ name }}"
        {%- endfor %}
        {%- if proto == 'ip' %}
        {%- for name, rule in pillar.firewall.rules_filter_input_v4.items() %}
        {{ rule }} comment "Custom rule v4: {{ name }}"
        {%- endfor %}
        {%- endif %}
        {%- if proto == 'ip6' %}
        {%- for name, rule in pillar.firewall.rules_filter_input_v6.items() %}
        {{ rule }} comment "Custom rule v6: {{ name }}"
        {%- endfor %}
        {%- endif %}
    }
    chain FORWARD {
        type filter hook forward priority filter; policy {{ strict_policy }};
        # meta nftrace set 1
        # log prefix "ip pws-filter forward: " counter

        # Allow all ICMP and IGMP traffic, but enforce a rate limit
        # to help prevent some types of flood attacks.
        {%- if proto == 'ip' %}
        ip protocol icmp limit rate 100/second accept
        ip protocol igmp limit rate 100/second accept
        {%- else %}
        ip6 nexthdr ipv6-icmp limit rate 100/second accept
        {%- endif %}

        {%- for name, rule in pillar.firewall.rules_filter_forward.items() %}
        {{ rule }} comment "Custom rule: {{ name }}"
        {%- endfor %}
        {%- if proto == 'ip' %}
        {%- for name, rule in pillar.firewall.rules_filter_forward_v4.items() %}
        {{ rule }} comment "Custom rule v4: {{ name }}"
        {%- endfor %}
        {%- endif %}
        {%- if proto == 'ip6' %}
        {%- for name, rule in pillar.firewall.rules_filter_forward_v6.items() %}
        {{ rule }} comment "Custom rule v6: {{ name }}"
        {%- endfor %}
        {%- endif %}
    }
    chain OUTPUT {
        type filter hook output priority filter
        policy accept
    }
}

table {{ proto }} nat {
    chain POSTROUTING {
        type nat hook postrouting priority srcnat
        policy accept
    }
    chain PREROUTING {
        type nat hook prerouting priority dstnat
        policy accept
        {%- if proto == 'ip' %}
        {%- for name, rule in pillar.firewall.rules_nat_prerouting_v4.items() %}
        {{ rule }} comment "Custom rule: {{ name }}"
        {%- endfor %}
        {%- endif %}
        {%- if proto == 'ip6' %}
        {%- for name, rule in pillar.firewall.rules_nat_prerouting_v6.items() %}
        {{ rule }} comment "Custom rule: {{ name }}"
        {%- endfor %}
        {%- endif %}
    }
    # Not supported in old debian?
    # chain OUTPUT {
    #     type nat hook output priority dstnat
    #     policy accept
    # }
}

table {{ proto }} mangle {
    chain PREROUTING {
        type filter hook prerouting priority mangle
        policy accept
        {%- for name, rule in pillar.firewall.rules_mangle_prerouting.items() %}
        {{ rule }} comment "Custom rule: {{ name }}"
        {%- endfor %}
    }
    chain OUTPUT {
        type route hook output priority mangle
        policy accept
    }
}
{%- endfor %}

{%- for id, enable in pillar.firewall.include_files.items() %}
{%- if enable %}
include "/etc/nftables.d/{{ id }}.nft"
{%- endif %}
{%- endfor %}

# Ruleset files related to PWS config (post-setup)
# {%- if pillar.firewall.strict_mode %}
# {%- for proto in proto_tables %}
# table {{ proto }} filter {
#     chain INPUT {
#         # Logging
#         # log prefix "[nftables] Inbound Denied: " flags all counter drop
#         counter drop
#     }
#     chain FORWARD {
#         # log prefix "nftables drop fw: "
#         counter drop
#     }
# }
# {%- endfor %}
# {%- endif %}
