#!/opt/venv/app/bin/python

import datetime
import shutil
import exifread
import argparse
import os
import sys
from pathlib import Path


parser = argparse.ArgumentParser(
    description='Sort file according to EXIF',
)

parser.add_argument(
    '--out',
    action='store',
    type=str,
    required=True,
    help='out folder, use %%Y, %%m, %%d placeholders for Yer, Month and Day from file as part of path',
)

parser.add_argument(
    '--copy',
    action='store_true',
    help='copy files (instead of default move)',
)

parser.add_argument(
    '--older',
    action='store',
    type=int,
    help='process files older than X (days)',
)

parser.add_argument(
    '--lastmarker',
    action='store',
    type=str,
    help='path to state file, used to save / use last copied file timestamp, for incremental calls',
)

parser.add_argument(
    '-d', '--dry-run',
    action='store_true',
    help='dry run',
)

parser.add_argument(
    'file',
    type=str,
    nargs=argparse.ONE_OR_MORE
)

args = parser.parse_args()

def scanDir(pn: Path):
    ret = []
    if pn.name.startswith('.'):
        print(f"Warning: {pn} skipped")
        return ret
    if pn.is_file():
        return [pn]
    if pn.is_dir():
        for path in Path(pn).rglob('*'):
            ret = ret + scanDir(path)

    return ret

def detectFileDate(file: Path) -> datetime.datetime:
    ext = file.suffix.lower()
    if ext in ['.jpg', '.jpeg', '.png']:
        # Try to read exif
        try:
            fh = open(file, 'rb')
            tag = 'EXIF DateTimeOriginal'
            tags = exifread.process_file(fh, stop_tag=tag)
            dateTaken = str(tags[tag])
            imageDate = datetime.datetime.strptime(dateTaken, "%Y:%m:%d %H:%M:%S")
            return imageDate
        except:
            # print(f"Warning: no EXIF loaded for {file}")
            pass # ignore
    # No exif -> use file modified time
    return datetime.datetime.fromtimestamp(file.stat().st_mtime)

# Find all files

files = []

for pattern in args.file:
    p = Path(pattern)
    files = files + scanDir(p)

files = list(set(files))

# Store the newest processed file, to track state, if --lastmarker is set
newest_file_dt = None
# Load previous marker (if set)
previous_file_dt = None
if args.lastmarker and Path(args.lastmarker).exists():
    try:
        previous_file_dt = datetime.datetime.fromtimestamp(float(Path(args.lastmarker).read_text().strip()))
    except:
        pass
    newest_file_dt = previous_file_dt
    print(f"Last processed file previous time: {previous_file_dt}")

print(f"Found {len(files)} files")

if len(files) == 0:
    print("No files found, exitting")
    sys.exit(0)

for file in files:
    # Get date
    file_dt = detectFileDate(file)

    if args.older:
        time_between = datetime.datetime.now() - file_dt
        if time_between.days < args.older:
            continue

    if args.lastmarker:
        if previous_file_dt and file_dt < previous_file_dt:
            continue
        if newest_file_dt == None or file_dt > newest_file_dt:
            print(f"Newest file: {file_dt}")
            newest_file_dt = file_dt

    # Check placeholders in out path
    out_path_tpl = args.out
    out_path_tpl = out_path_tpl.replace('%Y', file_dt.strftime("%Y"))
    out_path_tpl = out_path_tpl.replace('%m', file_dt.strftime("%m"))
    out_path_tpl = out_path_tpl.replace('%d', file_dt.strftime("%d"))

    out_path = Path(out_path_tpl) / file.name

    if out_path.exists():
        # print(f"Warning: {out_path} already exists, skipping")
        continue

    print(f"{file_dt}, {file} -> {out_path}")

    if args.dry_run:
        # Do nothing
        pass
    else:
        out_path.parent.mkdir(parents=True, exist_ok=True)
        if args.copy:
            shutil.copy2(file, out_path)
        else:
            shutil.move(file, out_path)
        # Copy permissions
        st = os.stat(file)
        os.chown(out_path, st.st_uid, st.st_gid)

if args.dry_run:
    # Do nothing
    pass
else:
    if args.lastmarker:
        # Save newes processed file
        with open(Path(args.lastmarker), 'w') as f:
            f.write(str(newest_file_dt.timestamp()))

print("Finished")
